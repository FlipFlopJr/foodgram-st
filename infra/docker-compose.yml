services:
  frontend:
    container_name: front_app
    build: ../frontend
    volumes:
      - ../frontend/:/app/result_build/
    networks:
      - app_network

  postgres:
    container_name: postgres_db
    image: postgres:17
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - 5432:5432
    volumes:
      - .pgdata:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    container_name: backend_app
    build:
      context: ../backend/
      dockerfile: Dockerfile
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DEBUG: ${DEBUG}
      SECRET_KEY: ${SECRET_KEY}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
    ports:
      - 8000:8000
    networks:
      - app_network
    volumes:
      - media_volume:/app/media/
      - static_volume:/app/static/

  nginx:
    container_name: nginx_gateway
    image: nginx:1.25.4-alpine
    ports:
      - 80:80
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ../frontend/build:/usr/share/nginx/html/
      - ../docs/:/usr/share/nginx/html/api/docs/
      - static_volume:/var/html/static/
      - media_volume:/var/html/media/
    networks:
      - app_network
    depends_on:
      - backend

networks:
  app_network:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.7.0/24

volumes:
  media_volume:
  static_volume: